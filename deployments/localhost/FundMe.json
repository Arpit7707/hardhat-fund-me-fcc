{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x53b396c9a686161828bada32c4ec7282e381dfd8dd6d5f8f2c4ee9c8e3567d04",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1048255",
    "logsBloom": "0x
    "blockHash": "0x44c43fc5f634d69e27fba270ef0302bdf581bfbba950206dcf81aa4d932325d7",
    "transactionHash": "0x53b396c9a686161828bada32c4ec7282e381dfd8dd6d5f8f2c4ee9c8e3567d04",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1048255",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "0ef3204d3b04a7d7e62708694e3db45e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//Get funds from user\\n//Withdraw funds\\n//Set minimum funding value in USD\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    //declaring variable a constant or immutable is gas efficient (ecreases gas prices), hence they are used for gas optimization\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    AggregatorV3Interface private s_priceFeed; //s_ represents that they are storage variablesnand storing in storage costs too much gas\\n    //constant variable deployment gas - 21,415\\n    //non constant variable deployment gas - 23,515\\n\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    address private immutable i_owner;\\n\\n    //immuntable variable deployment gas - 21,508\\n    //non immuntable variable deployment gas - 23,644\\n\\n    //constructor is called immediately after smart contract is deployed\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        //Want to be able to set a minimum fund amount in USD\\n        //1. How do we send ETH to this contract?\\n\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't fund enough!\\\"\\n        ); //1e18 == 1* 10^18 == 1000000000000000000\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n\\n        //What is reverting?\\n        //undo any action before, and send reamining gas back\\n    }\\n\\n    //onlyOwner is modiifier\\n    //when the function is called, firstly statements in onlyOwner modifier will get executed then the remaining statements of the code will get executed\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        //reset the array\\n        s_funders = new address[](0);\\n\\n        //actually withdraw the funds\\n\\n        //Method 1:transfer\\n        //msg.address = address (address of sender/funder)\\n        //payable(msg.sender) = payable address\\n        //address(this) is address of destination contract(address of smart contract)\\n        //payable(msg.sender).transfer(address(this).balance);\\n\\n        //Method 2:send\\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        //require(sendSuccess, \\\"Send failed\\\"); //require() is Kind of conditional statement\\n\\n        //Method 3:call\\n        //bytes objects are arrays, so dataReturned is declared as memory\\n        //call method returns two variables, 1.boolean 2.byte object with some data\\n        (\\n            bool callSuccess, /*bytes memory dataReturned*/\\n\\n        ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        //mapping can't be in memory\\n        for (\\n            uint256 fundersIndex = 0;\\n            fundersIndex < funders.length;\\n            fundersIndex++\\n        ) {\\n            address funder = funders[fundersIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Call failed\\\");\\n    }\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\n\\n        //this syntax is gas efficient\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner(); //NotOwner() error is declared at the top, outside of contract\\n        }\\n        _;\\n        //_ represents remaining code\\n        //when modifier is added in declaration of function then firstly the require statement is execurted and rest of the code is executed later\\n    }\\n\\n    //What if someone sends this contract ETH without calling fund function\\n\\n    //receive() is special function and don't require function keyword\\n    //we can send ETH to contract without making any function by receiver() sunction\\n    //receive() is triggered(executed) when we pay using transact after deploying this contract, while clicking transact CALLDATA should be blank\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    //fallback() is special function and don't require function keyword\\n    //If CALLDATA will not be empty then fallback function will be triggered(executed)\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xaca25753f2a2fdef0a7581450fb25ff32ad563d151c888602e08c1235c8ffb02\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        //ETH in terms of USD\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x78a13596e730c5dd89649b018a97d6d37513f025507db8b0204f17dc92e09d52\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200131f3803806200131f83398181016040528101906200003791906200011f565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000151565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e782620000ba565b9050919050565b620000f981620000da565b81146200010557600080fd5b50565b6000815190506200011981620000ee565b92915050565b600060208284031215620001385762000137620000b5565b5b6000620001488482850162000108565b91505092915050565b60805160601c61119a620001856000396000818161038a015281816105da015281816106290152610820015261119a6000f3fe60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101545780639e87a5cd1461017f578063b60d4288146101aa578063be2693f0146101b45761008e565b80630343fb25146100985780633a7b6c74146100d55780633ccfd60b146101125780636b69a592146101295761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ad2565b6102f7565b6040516100cc9190610b18565b60405180910390f35b3480156100e157600080fd5b506100fc60048036038101906100f79190610b5f565b610340565b6040516101099190610b9b565b60405180910390f35b34801561011e57600080fd5b50610127610388565b005b34801561013557600080fd5b5061013e6105c9565b60405161014b9190610b18565b60405180910390f35b34801561016057600080fd5b506101696105d6565b6040516101769190610b9b565b60405180910390f35b34801561018b57600080fd5b506101946105fe565b6040516101a19190610c15565b60405180910390f35b6101b26101be565b005b6101bc610627565b005b6802b5e3af16b18800006101fb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ec90919063ffffffff16565b101561023c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023390610c8d565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ee9190610cdc565b92505081905550565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006001828154811061035657610355610d32565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040d576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104b95760006001828154811061043357610432610d32565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b190610d61565b915050610410565b50600067ffffffffffffffff8111156104d5576104d4610daa565b5b6040519080825280602002602001820160405280156105035781602001602082028036833780820191505090505b50600190805190602001906105199291906109c8565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161054090610e0a565b60006040518083038185875af1925050503d806000811461057d576040519150601f19603f3d011682016040523d82523d6000602084013e610582565b606091505b50509050806105c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bd90610e6b565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ac576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561073057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e6575b5050505050905060005b81518110156107bb57600082828151811061075857610757610d32565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107b390610d61565b91505061073a565b50600067ffffffffffffffff8111156107d7576107d6610daa565b5b6040519080825280602002602001820160405280156108055781602001602082028036833780820191505090505b506001908051906020019061081b9291906109c8565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161086290610e0a565b60006040518083038185875af1925050503d806000811461089f576040519150601f19603f3d011682016040523d82523d6000602084013e6108a4565b606091505b50509050806108e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108df90610e6b565b60405180910390fd5b5050565b6000806108f883610928565b90506000670de0b6b3a764000085836109119190610e8b565b61091b9190610f14565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097157600080fd5b505afa158015610985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a99190610fd2565b5050509150506402540be400816109c0919061104d565b915050919050565b828054828255906000526020600020908101928215610a41579160200282015b82811115610a405782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109e8565b5b509050610a4e9190610a52565b5090565b5b80821115610a6b576000816000905550600101610a53565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9f82610a74565b9050919050565b610aaf81610a94565b8114610aba57600080fd5b50565b600081359050610acc81610aa6565b92915050565b600060208284031215610ae857610ae7610a6f565b5b6000610af684828501610abd565b91505092915050565b6000819050919050565b610b1281610aff565b82525050565b6000602082019050610b2d6000830184610b09565b92915050565b610b3c81610aff565b8114610b4757600080fd5b50565b600081359050610b5981610b33565b92915050565b600060208284031215610b7557610b74610a6f565b5b6000610b8384828501610b4a565b91505092915050565b610b9581610a94565b82525050565b6000602082019050610bb06000830184610b8c565b92915050565b6000819050919050565b6000610bdb610bd6610bd184610a74565b610bb6565b610a74565b9050919050565b6000610bed82610bc0565b9050919050565b6000610bff82610be2565b9050919050565b610c0f81610bf4565b82525050565b6000602082019050610c2a6000830184610c06565b92915050565b600082825260208201905092915050565b7f4469646e27742066756e6420656e6f7567682100000000000000000000000000600082015250565b6000610c77601383610c30565b9150610c8282610c41565b602082019050919050565b60006020820190508181036000830152610ca681610c6a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ce782610aff565b9150610cf283610aff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d2757610d26610cad565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d6c82610aff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9f57610d9e610cad565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610df4600083610dd9565b9150610dff82610de4565b600082019050919050565b6000610e1582610de7565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e55600b83610c30565b9150610e6082610e1f565b602082019050919050565b60006020820190508181036000830152610e8481610e48565b9050919050565b6000610e9682610aff565b9150610ea183610aff565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eda57610ed9610cad565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f1f82610aff565b9150610f2a83610aff565b925082610f3a57610f39610ee5565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f6481610f45565b8114610f6f57600080fd5b50565b600081519050610f8181610f5b565b92915050565b6000819050919050565b610f9a81610f87565b8114610fa557600080fd5b50565b600081519050610fb781610f91565b92915050565b600081519050610fcc81610b33565b92915050565b600080600080600060a08688031215610fee57610fed610a6f565b5b6000610ffc88828901610f72565b955050602061100d88828901610fa8565b945050604061101e88828901610fbd565b935050606061102f88828901610fbd565b925050608061104088828901610f72565b9150509295509295909350565b600061105882610f87565b915061106383610f87565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110a2576110a1610cad565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110df576110de610cad565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561111c5761111b610cad565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561115957611158610cad565b5b82820290509291505056fea2646970667358221220536c76ba54773cd7e4b9445f737d2161059a586256da955816aa66eeae4fd59c64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101545780639e87a5cd1461017f578063b60d4288146101aa578063be2693f0146101b45761008e565b80630343fb25146100985780633a7b6c74146100d55780633ccfd60b146101125780636b69a592146101295761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ad2565b6102f7565b6040516100cc9190610b18565b60405180910390f35b3480156100e157600080fd5b506100fc60048036038101906100f79190610b5f565b610340565b6040516101099190610b9b565b60405180910390f35b34801561011e57600080fd5b50610127610388565b005b34801561013557600080fd5b5061013e6105c9565b60405161014b9190610b18565b60405180910390f35b34801561016057600080fd5b506101696105d6565b6040516101769190610b9b565b60405180910390f35b34801561018b57600080fd5b506101946105fe565b6040516101a19190610c15565b60405180910390f35b6101b26101be565b005b6101bc610627565b005b6802b5e3af16b18800006101fb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ec90919063ffffffff16565b101561023c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023390610c8d565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ee9190610cdc565b92505081905550565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006001828154811061035657610355610d32565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040d576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104b95760006001828154811061043357610432610d32565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b190610d61565b915050610410565b50600067ffffffffffffffff8111156104d5576104d4610daa565b5b6040519080825280602002602001820160405280156105035781602001602082028036833780820191505090505b50600190805190602001906105199291906109c8565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161054090610e0a565b60006040518083038185875af1925050503d806000811461057d576040519150601f19603f3d011682016040523d82523d6000602084013e610582565b606091505b50509050806105c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bd90610e6b565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ac576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561073057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e6575b5050505050905060005b81518110156107bb57600082828151811061075857610757610d32565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107b390610d61565b91505061073a565b50600067ffffffffffffffff8111156107d7576107d6610daa565b5b6040519080825280602002602001820160405280156108055781602001602082028036833780820191505090505b506001908051906020019061081b9291906109c8565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161086290610e0a565b60006040518083038185875af1925050503d806000811461089f576040519150601f19603f3d011682016040523d82523d6000602084013e6108a4565b606091505b50509050806108e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108df90610e6b565b60405180910390fd5b5050565b6000806108f883610928565b90506000670de0b6b3a764000085836109119190610e8b565b61091b9190610f14565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097157600080fd5b505afa158015610985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a99190610fd2565b5050509150506402540be400816109c0919061104d565b915050919050565b828054828255906000526020600020908101928215610a41579160200282015b82811115610a405782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109e8565b5b509050610a4e9190610a52565b5090565b5b80821115610a6b576000816000905550600101610a53565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9f82610a74565b9050919050565b610aaf81610a94565b8114610aba57600080fd5b50565b600081359050610acc81610aa6565b92915050565b600060208284031215610ae857610ae7610a6f565b5b6000610af684828501610abd565b91505092915050565b6000819050919050565b610b1281610aff565b82525050565b6000602082019050610b2d6000830184610b09565b92915050565b610b3c81610aff565b8114610b4757600080fd5b50565b600081359050610b5981610b33565b92915050565b600060208284031215610b7557610b74610a6f565b5b6000610b8384828501610b4a565b91505092915050565b610b9581610a94565b82525050565b6000602082019050610bb06000830184610b8c565b92915050565b6000819050919050565b6000610bdb610bd6610bd184610a74565b610bb6565b610a74565b9050919050565b6000610bed82610bc0565b9050919050565b6000610bff82610be2565b9050919050565b610c0f81610bf4565b82525050565b6000602082019050610c2a6000830184610c06565b92915050565b600082825260208201905092915050565b7f4469646e27742066756e6420656e6f7567682100000000000000000000000000600082015250565b6000610c77601383610c30565b9150610c8282610c41565b602082019050919050565b60006020820190508181036000830152610ca681610c6a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ce782610aff565b9150610cf283610aff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d2757610d26610cad565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d6c82610aff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9f57610d9e610cad565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610df4600083610dd9565b9150610dff82610de4565b600082019050919050565b6000610e1582610de7565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e55600b83610c30565b9150610e6082610e1f565b602082019050919050565b60006020820190508181036000830152610e8481610e48565b9050919050565b6000610e9682610aff565b9150610ea183610aff565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eda57610ed9610cad565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f1f82610aff565b9150610f2a83610aff565b925082610f3a57610f39610ee5565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f6481610f45565b8114610f6f57600080fd5b50565b600081519050610f8181610f5b565b92915050565b6000819050919050565b610f9a81610f87565b8114610fa557600080fd5b50565b600081519050610fb781610f91565b92915050565b600081519050610fcc81610b33565b92915050565b600080600080600060a08688031215610fee57610fed610a6f565b5b6000610ffc88828901610f72565b955050602061100d88828901610fa8565b945050604061101e88828901610fbd565b935050606061102f88828901610fbd565b925050608061104088828901610f72565b9150509295509295909350565b600061105882610f87565b915061106383610f87565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110a2576110a1610cad565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110df576110de610cad565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561111c5761111b610cad565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561115957611158610cad565b5b82820290509291505056fea2646970667358221220536c76ba54773cd7e4b9445f737d2161059a586256da955816aa66eeae4fd59c64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}