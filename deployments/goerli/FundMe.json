{
  "address": "0x94981F09B9aCEd11da8b84cFb74895F486487B92",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x263033d622853915b991833d027db701e2bab6128dfabbda3a8340867d218007",
  "receipt": {
    "to": null,
    "from": "0xc6ea3De649390F1087734c035D6464d096aF6075",
    "contractAddress": "0x94981F09B9aCEd11da8b84cFb74895F486487B92",
    "transactionIndex": 13,
    "gasUsed": "877231",
    "logsBloom": "0x
    "blockHash": "0x689ed95d04f39516e62e77ba8466ac67a069ae2d5439a877d4d131d3d7b12a9a",
    "transactionHash": "0x263033d622853915b991833d027db701e2bab6128dfabbda3a8340867d218007",
    "logs": [],
    "blockNumber": 7761693,
    "cumulativeGasUsed": "2014224",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 1,
  "solcInputHash": "fbf2f5669e8cd17f655e44fdc23dfe9f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//Get funds from user\\n//Withdraw funds\\n//Set minimum funding value in USD\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    //declaring variable a constant or immutable is gas efficient (ecreases gas prices), hence they are used for gas optimization\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    AggregatorV3Interface public priceFeed;\\n    //constant variable deployment gas - 21,415\\n    //non constant variable deployment gas - 23,515\\n\\n    address[] public funders;\\n    mapping(address => uint256) public addressToAmountFunded;\\n\\n    address public immutable i_owner;\\n\\n    //immuntable variable deployment gas - 21,508\\n    //non immuntable variable deployment gas - 23,644\\n\\n    //constructor is called immediately after smart contract is deployed\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        //Want to be able to set a minimum fund amount in USD\\n        //1. How do we send ETH to this contract?\\n\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't fund enough!\\\"\\n        ); //1e18 == 1* 10^18 == 1000000000000000000\\n        funders.push(msg.sender);\\n        addressToAmountFunded[msg.sender] += msg.value;\\n\\n        //What is reverting?\\n        //undo any action before, and send reamining gas back\\n    }\\n\\n    //onlyOwner is modiifier\\n    //when the function is called, firstly statements in onlyOwner modifier will get executed then the remaining statements of the code will get executed\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n\\n        //reset the array\\n        funders = new address[](0);\\n\\n        //actually withdraw the funds\\n\\n        //Method 1:transfer\\n        //msg.address = address (address of sender/funder)\\n        //payable(msg.sender) = payable address\\n        //address(this) is address of destination contract(address of smart contract)\\n        //payable(msg.sender).transfer(address(this).balance);\\n\\n        //Method 2:send\\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        //require(sendSuccess, \\\"Send failed\\\"); //require() is Kind of conditional statement\\n\\n        //Method 3:call\\n        //bytes objects are arrays, so dataReturned is declared as memory\\n        //call method returns two variables, 1.boolean 2.byte object with some data\\n        (\\n            bool callSuccess, /*bytes memory dataReturned*/\\n\\n        ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\n\\n        //this syntax is gas efficient\\n        if (msg.sender != i_owner) {\\n            revert NotOwner(); //NotOwner() error is declared at the top, outside of contract\\n        }\\n        _;\\n        //_ represents remaining code\\n        //when modifier is added in declaration of function then firstly the require statement is execurted and rest of the code is executed later\\n    }\\n\\n    //What if someone sends this contract ETH without calling fund function\\n\\n    //receive() is special function and don't require function keyword\\n    //we can send ETH to contract without making any function by receiver() sunction\\n    //receive() is triggered(executed) when we pay using transact after deploying this contract, while clicking transact CALLDATA should be blank\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    //fallback() is special function and don't require function keyword\\n    //If CALLDATA will not be empty then fallback function will be triggered(executed)\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0x1060649d65f94ac99f914d2e839d8553040165251a89a33ec642fb98b4f7059b\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        //ETH in terms of USD\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x78a13596e730c5dd89649b018a97d6d37513f025507db8b0204f17dc92e09d52\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405162000fe438038062000fe483398181016040528101906100349190610114565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610141565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e1826100b6565b9050919050565b6100f1816100d6565b81146100fc57600080fd5b50565b60008151905061010e816100e8565b92915050565b60006020828403121561012a576101296100b1565b5b6000610138848285016100ff565b91505092915050565b60805160601c610e7d62000167600039600081816102e4015261056e0152610e7d6000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e2565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107b5565b610523565b6040516100d891906107fb565b60405180910390f35b3480156100ed57600080fd5b506100f661053b565b60405161010391906107fb565b60405180910390f35b34801561011857600080fd5b50610121610548565b60405161012e9190610875565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661056c565b604051610163919061089f565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108e6565b610590565b6040516101a0919061089f565b60405180910390f35b6802b5e3af16b18800006101e660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105cf90919063ffffffff16565b1015610227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021e90610970565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102d991906109bf565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610367576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104135760006001828154811061038d5761038c610a15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040b90610a44565b91505061036a565b50600067ffffffffffffffff81111561042f5761042e610a8d565b5b60405190808252806020026020018201604052801561045d5781602001602082028036833780820191505090505b50600190805190602001906104739291906106ab565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049a90610aed565b60006040518083038185875af1925050503d80600081146104d7576040519150601f19603f3d011682016040523d82523d6000602084013e6104dc565b606091505b5050905080610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051790610b4e565b60405180910390fd5b50565b60026020528060005260406000206000915090505481565b6802b5e3af16b188000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181815481106105a057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105db8361060b565b90506000670de0b6b3a764000085836105f49190610b6e565b6105fe9190610bf7565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561065457600080fd5b505afa158015610668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068c9190610cb5565b5050509150506402540be400816106a39190610d30565b915050919050565b828054828255906000526020600020908101928215610724579160200282015b828111156107235782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106cb565b5b5090506107319190610735565b5090565b5b8082111561074e576000816000905550600101610736565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061078282610757565b9050919050565b61079281610777565b811461079d57600080fd5b50565b6000813590506107af81610789565b92915050565b6000602082840312156107cb576107ca610752565b5b60006107d9848285016107a0565b91505092915050565b6000819050919050565b6107f5816107e2565b82525050565b600060208201905061081060008301846107ec565b92915050565b6000819050919050565b600061083b61083661083184610757565b610816565b610757565b9050919050565b600061084d82610820565b9050919050565b600061085f82610842565b9050919050565b61086f81610854565b82525050565b600060208201905061088a6000830184610866565b92915050565b61089981610777565b82525050565b60006020820190506108b46000830184610890565b92915050565b6108c3816107e2565b81146108ce57600080fd5b50565b6000813590506108e0816108ba565b92915050565b6000602082840312156108fc576108fb610752565b5b600061090a848285016108d1565b91505092915050565b600082825260208201905092915050565b7f4469646e27742066756e6420656e6f7567682100000000000000000000000000600082015250565b600061095a601383610913565b915061096582610924565b602082019050919050565b600060208201905081810360008301526109898161094d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109ca826107e2565b91506109d5836107e2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a0a57610a09610990565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a4f826107e2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a8257610a81610990565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ad7600083610abc565b9150610ae282610ac7565b600082019050919050565b6000610af882610aca565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b38600b83610913565b9150610b4382610b02565b602082019050919050565b60006020820190508181036000830152610b6781610b2b565b9050919050565b6000610b79826107e2565b9150610b84836107e2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bbd57610bbc610990565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c02826107e2565b9150610c0d836107e2565b925082610c1d57610c1c610bc8565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c4781610c28565b8114610c5257600080fd5b50565b600081519050610c6481610c3e565b92915050565b6000819050919050565b610c7d81610c6a565b8114610c8857600080fd5b50565b600081519050610c9a81610c74565b92915050565b600081519050610caf816108ba565b92915050565b600080600080600060a08688031215610cd157610cd0610752565b5b6000610cdf88828901610c55565b9550506020610cf088828901610c8b565b9450506040610d0188828901610ca0565b9350506060610d1288828901610ca0565b9250506080610d2388828901610c55565b9150509295509295909350565b6000610d3b82610c6a565b9150610d4683610c6a565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d8557610d84610990565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dc257610dc1610990565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610dff57610dfe610990565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e3c57610e3b610990565b5b82820290509291505056fea26469706673582212203ba1a279da1bd878e072ebd611040aa787abdcd6f2f9b679cce7ae47c77f5bdf64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e2565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107b5565b610523565b6040516100d891906107fb565b60405180910390f35b3480156100ed57600080fd5b506100f661053b565b60405161010391906107fb565b60405180910390f35b34801561011857600080fd5b50610121610548565b60405161012e9190610875565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661056c565b604051610163919061089f565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108e6565b610590565b6040516101a0919061089f565b60405180910390f35b6802b5e3af16b18800006101e660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105cf90919063ffffffff16565b1015610227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021e90610970565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102d991906109bf565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610367576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104135760006001828154811061038d5761038c610a15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040b90610a44565b91505061036a565b50600067ffffffffffffffff81111561042f5761042e610a8d565b5b60405190808252806020026020018201604052801561045d5781602001602082028036833780820191505090505b50600190805190602001906104739291906106ab565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049a90610aed565b60006040518083038185875af1925050503d80600081146104d7576040519150601f19603f3d011682016040523d82523d6000602084013e6104dc565b606091505b5050905080610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051790610b4e565b60405180910390fd5b50565b60026020528060005260406000206000915090505481565b6802b5e3af16b188000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181815481106105a057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105db8361060b565b90506000670de0b6b3a764000085836105f49190610b6e565b6105fe9190610bf7565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561065457600080fd5b505afa158015610668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068c9190610cb5565b5050509150506402540be400816106a39190610d30565b915050919050565b828054828255906000526020600020908101928215610724579160200282015b828111156107235782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106cb565b5b5090506107319190610735565b5090565b5b8082111561074e576000816000905550600101610736565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061078282610757565b9050919050565b61079281610777565b811461079d57600080fd5b50565b6000813590506107af81610789565b92915050565b6000602082840312156107cb576107ca610752565b5b60006107d9848285016107a0565b91505092915050565b6000819050919050565b6107f5816107e2565b82525050565b600060208201905061081060008301846107ec565b92915050565b6000819050919050565b600061083b61083661083184610757565b610816565b610757565b9050919050565b600061084d82610820565b9050919050565b600061085f82610842565b9050919050565b61086f81610854565b82525050565b600060208201905061088a6000830184610866565b92915050565b61089981610777565b82525050565b60006020820190506108b46000830184610890565b92915050565b6108c3816107e2565b81146108ce57600080fd5b50565b6000813590506108e0816108ba565b92915050565b6000602082840312156108fc576108fb610752565b5b600061090a848285016108d1565b91505092915050565b600082825260208201905092915050565b7f4469646e27742066756e6420656e6f7567682100000000000000000000000000600082015250565b600061095a601383610913565b915061096582610924565b602082019050919050565b600060208201905081810360008301526109898161094d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109ca826107e2565b91506109d5836107e2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a0a57610a09610990565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a4f826107e2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a8257610a81610990565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ad7600083610abc565b9150610ae282610ac7565b600082019050919050565b6000610af882610aca565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b38600b83610913565b9150610b4382610b02565b602082019050919050565b60006020820190508181036000830152610b6781610b2b565b9050919050565b6000610b79826107e2565b9150610b84836107e2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bbd57610bbc610990565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c02826107e2565b9150610c0d836107e2565b925082610c1d57610c1c610bc8565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c4781610c28565b8114610c5257600080fd5b50565b600081519050610c6481610c3e565b92915050565b6000819050919050565b610c7d81610c6a565b8114610c8857600080fd5b50565b600081519050610c9a81610c74565b92915050565b600081519050610caf816108ba565b92915050565b600080600080600060a08688031215610cd157610cd0610752565b5b6000610cdf88828901610c55565b9550506020610cf088828901610c8b565b9450506040610d0188828901610ca0565b9350506060610d1288828901610ca0565b9250506080610d2388828901610c55565b9150509295509295909350565b6000610d3b82610c6a565b9150610d4683610c6a565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d8557610d84610990565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dc257610dc1610990565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610dff57610dfe610990565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e3c57610e3b610990565b5b82820290509291505056fea26469706673582212203ba1a279da1bd878e072ebd611040aa787abdcd6f2f9b679cce7ae47c77f5bdf64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}